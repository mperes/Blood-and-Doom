mixin translate(options)
  - options.html = options.html || {};
  span.translation&attributes(options.html)
    if options.prepend
      span(class="translation__prepend")=options.prepend
    if options.image
      img(class="translation__image" src=`${imgServer}${options.image}` alt=options.key)
    else if options.key
      span(class="translation__key" data-i18n=options.key)
    if options.append
      span(class="translation__append")=options.append

mixin rangebar(options)
  - options.html = options.html || {};
  .rangebar.labelled&attributes(options.html)
    if options.label 
      label
        +translate(options.label)
        if options.steps && options.name
          .rangebar__steps
              each _, i in Array(options.steps)
                - const step = options.steps - i;
                input(type='checkbox' name=`attr_${options.name}` value=step)
    else if options.steps && options.name
      .rangebar__steps
        each _, i in Array(options.steps)
          - const step = options.steps - i;
          input(type='checkbox' name=`attr_${options.name}` value=step)

mixin textarea(options)
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
  .textarea.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        textarea(name=`attr_${options.name}`)&attributes(inputOptions)
    else
      textarea(name=`attr_${options.name}`)&attributes(inputOptions)
      
mixin text-input(options)
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
  .text-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          if options.list
            input(type='text' name=`attr_${options.name}` list=options.list)&attributes(inputOptions)
          else
            input(type='text' name=`attr_${options.name}`)&attributes(inputOptions)
    else if options.name
      if options.list
        input(type='text' name=`attr_${options.name}` list=options.list)&attributes(inputOptions)
      else
        input(type='text' name=`attr_${options.name}`)&attributes(inputOptions)

mixin number-input(options) 
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
  .number-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          input(type='number' name=`attr_${options.name}`)&attributes(inputOptions)
    else if options.name
      input(type='number' name=`attr_${options.name}`)&attributes(inputOptions)

mixin display(options)
  - options.html = options.html || {};
  .display&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          span(name=`attr_${options.name}`)
    else if options.name
      span(name=`attr_${options.name}`)

mixin repeating-section(options)
  - options.html = options.html || {};
  block
  .repeating-section&attributes(options.html)
    - const editOnly = options.html && options.html.class && options.html.class.includes('repeating-section--edit-only');
    - delete options.html;
    fieldset(class=`repeating_${options.name}`)
      .repeating-section__toggle
        img(src=`${imgServer}/cHrTTyZb/edit.png` data-i18n-alt='toggle-edit-mode')
        input(type='checkbox' name='attr_repeating-toggle')
      if !editOnly
        .repeating-section__view
          +repeating-view
      .repeating-section__edit
        +repeating-edit

mixin data-list(options)
  - options.html = options.html || {};
  datalist(id=options.id)&attributes(options.html)
    - delete options.html;
    if options.list
      each option in options.list
        option(value=item data-i18n=option)

mixin tab(options)
  - options.html = options.html || {};
  .tab()&attributes(options.html)
    label
      +translate({key:options.key})
      input(type='radio' name=`attr_${options.group}` value=options.name checked=options.checked)

each options, list in spine.lists
  +data-list({id:`${list}-list`, list:options})    
   
.sheet__container
  .card.card--header
    .section.section--header
      .group
        +text-input({name:'character_name', label:{key:'character-name'}, html:{class:'text-input--simple labelled--top-center text-input--align-center text-input--xlarge-text'}})
        +rangebar({name:'blood-points', steps: 6, label:{key:'blood-points'}, html:{class:'labelled--top-center rangebar--afar'}})
      .group
        img(src=`${imgServer}/65G7L1Y5/logo-1300-inline-bw.png` alt='logo')
        +rangebar({name:'momentum-pool', steps: 3, label:{key:'momentum-pool'}, html:{class:'labelled--top-center rangebar--afar'}})
      .group
        +text-input({name:'class', label:{key:'class'}, html:{class:'text-input--simple labelled--top-center text-input--align-center text-input--xlarge-text'}})
        +rangebar({name:'doom-points', steps: 6, label:{key:'doom-points'}, html:{class:'labelled--top-center rangebar--afar'}})
  .navigation.tabs
    input(class='current-page' type='hidden' name='attr_current-page')
    +tab({key:'page-1', name:'page-1', group:'current-page', checked: true, html:{class:`tab--page-1`}})
    +tab({key:'page-2', name:'page-2', group:'current-page', html:{class:`tab--page-2`}})
    +tab({key:'page-3', name:'page-3', group:'current-page', html:{class:`tab--page-3`}})
  .pages.tabbed
    .page.page--1.tab-content  
      include page-1.pug
    .page.page--2.tab-content
      include page-2.pug  
    .page.page--3.tab-content
      include page-3.pug