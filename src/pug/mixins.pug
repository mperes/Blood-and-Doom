mixin translate(options)
  - options.html = options.html || {};
  span.translation&attributes(options.html)
    if options.prepend
      span(class="translation__prepend")=options.prepend
    if options.image
      img.font-awesome(class="translation__image" src=`${imgServer}${options.image}` data-i18n-title=options.key data-i18n-alt=options.key)
    else if options.key
      span(class="translation__key" data-i18n=options.key)
    if options.append
      span(class="translation__append")=options.append

mixin rangebar(options)
  - options.html = options.html || {};
  .rangebar.labelled&attributes(options.html)
    if options.label 
      label
        +translate(options.label)
        if options.steps && options.name
          if options.max
            input.rangebar__max(type='hidden' name=`attr_${options.name}-max` value=options.max)
          .rangebar__steps
              if options.clear
                button(type='action' name=`act_${options.name}-clear` class='rangebar__clear')
                  +translate({key:'clear'})
              each _, i in Array(options.steps)
                - const step = options.steps - i;
                .step
                  input(type='checkbox' name=`attr_${options.name}` value=step)
    else if options.steps && options.name
      if options.max
        input.rangebar__max(type='hidden' name=`attr_${options.name}-max`)
      .rangebar__steps
        if options.clear
          button(type='action' name=`act_${options.name}-clear`)
            +translate({key:'clear'})
        each _, i in Array(options.steps)
          - const step = options.steps - i;
          input(type='checkbox' name=`attr_${options.name}` value=step)

mixin textarea(options)
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
  .textarea.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        textarea(name=`attr_${options.name}`)&attributes(inputOptions)
    else
      textarea(name=`attr_${options.name}`)&attributes(inputOptions)
      
mixin text-input(options)
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
    if(options.value) inputOptions['value'] = options.value;
  .text-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        if options.rollable
          button.roll-damage(type='action' name=`act_${options.rollable}`)
            +translate(options.label)
        else
          +translate(options.label)
        if options.name
          if options.list
            input(type='text' name=`attr_${options.name}` list=options.list)&attributes(inputOptions)
          else
            input(type='text' name=`attr_${options.name}`)&attributes(inputOptions)
    else if options.name
      if options.list
        input(type='text' name=`attr_${options.name}` list=options.list)&attributes(inputOptions)
      else
        input(type='text' name=`attr_${options.name}`)&attributes(inputOptions)

mixin number-input(options) 
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
    if(options.value) inputOptions['value'] = options.value;
    if(options.min) inputOptions['min'] = options.min;
  .number-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          input(type='number' name=`attr_${options.name}`)&attributes(inputOptions)
    else if options.name
      input(type='number' name=`attr_${options.name}`)&attributes(inputOptions)

mixin populate-options(options)
  if options
    each option in options
      option(value=option)=option

mixin select-input(options)
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
    if(options.value) inputOptions['value'] = options.value;
  .select-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          select(name=`attr_${options.name}`)&attributes(inputOptions)
            if options.default
              option(data-i18n='choose' value='')
            +populate-options(options.options)
    else if options.name
      select(name=`attr_${options.name}`)&attributes(inputOptions)
        if options.default
          option(data-i18n='choose' value='')
        +populate-options(options.options)

mixin checkbox-input(options) 
  - 
    options.html = options.html || {};
    const inputOptions = {};
    if(options.placeholder) inputOptions['data-i18n-placeholder'] = options.placeholder;
    if(options.value) inputOptions['value'] = options.value;
  .checkbox-input.labelled&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          input(type='checkbox' name=`attr_${options.name}`)&attributes(inputOptions)
    else if options.name
      input(type='checkbox' name=`attr_${options.name}`)&attributes(inputOptions)

mixin display(options)
  - options.html = options.html || {};
  .display&attributes(options.html)
    - delete options.html;
    if options.label 
      label
        +translate(options.label)
        if options.name
          span(name=`attr_${options.name}`)
    else if options.name
      span(name=`attr_${options.name}`)
      if options.append
        span(name=`attr_${options.append}` class="display__append")

mixin action-button(options)
  - options.html = options.html || {};
  .action-button&attributes(options.html)
    - delete options.html;
    button(type='action' name=`act_${options.name}`)
      if options.label 
        +translate(options.label)

mixin repeating-section(options)
  - options.html = options.html || {};
  block
  .repeating-section&attributes(options.html)
    - const editOnly = options.html && options.html.class && options.html.class.includes('repeating-section--edit-only');
    - delete options.html;
    fieldset(class=`repeating_${options.name}`)
      .repeating-section__toggle
        img.font-awesome(src=`${imgServer}/mperes/Blood-and-Doom/refs/heads/main/static/cog.svg` data-i18n-alt='toggle-edit-mode')
        input(type='checkbox')
      if !editOnly
        .repeating-section__view
          +repeating-view
      .repeating-section__edit
        +repeating-edit

mixin data-list(options)
  - options.html = options.html || {};
  datalist(id=options.id)&attributes(options.html)
    - delete options.html;
    if options.list
      each option in options.list
        option(value=item data-i18n=option)

mixin tab(options)
  - options.html = options.html || {};
  .tab()&attributes(options.html)
    label
      +translate({key:options.key})
      input(type='radio' name=`attr_${options.group}` value=options.name checked=options.checked)

mixin picker(options)
  - options.html = options.html || {};
  .picker.labelled&attributes(options.html)
    if options.label 
      .label
        +translate(options.label)
        .picker__picks
            each option, i in options.options
              .pick
                span=option
                -
                  const type = options.required ? 'radio' : 'checkbox';
                  const checked = options.required && i === 0 ? true : false;
                input(type=type name=`attr_${options.name}` value=option checked=checked)
            if options.others
              input.other(type='hidden' name=`attr_${options.name}`)
              +select-input({name:`${options.name}`, default:true, options:options.others, html:{class:'select-input--simple labelled--left labelled--nowrap'}})
    else
      .picker__picks
        each option in options.options
          .pick
            span=option
            input(type='checkbox' name=`attr_${options.name}` value=option)
        if options.others
          input.other(type='hidden' name=`attr_${options.name}`)
          +select-input({name:`${options.name}`, default:true, options:options.others, html:{class:'select-input--simple labelled--left labelled--nowrap'}})

mixin rollpicker(options)
  - options.html = options.html || {};
  .rollpicker.labelled&attributes(options.html)
    if options.label 
      .label
        +translate(options.label)
        .rollpicker__picks
            each option in options.options
              button.pick(type='action' name=`act_${options.name}-${option}`)
                span=option
            if options.others
              +select-input({name:`${options.name}-others`, default:true, options:options.others, html:{class:'select-input--simple labelled--left labelled--nowrap'}})
    else
      .rollpicker__picks
        each option in options.options
          button.pick(type='action' name=`act_${options.name}-${option}`)
            span=option
        if options.others
          +select-input({name:`${options.name}-others`, default:true, options:options.others, html:{class:'select-input--simple labelled--left labelled--nowrap'}})